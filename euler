def find_way(graph):
    stack = []; 
    way = []
 
    stack.append(graph[0][0]) 
    count = 0
    
    while len(stack) > 0:
        print("Длина стека", len(stack))
        v = stack[len(stack) - 1]
        
        print(v)
        degree = get_d(v, graph)
 
        if degree == 0:
            print("Добавляем в список")
            stack.pop()
            way.append(v)
        else:
            print("Добавляем в стек")
            index, edge = get_edge_and_index(v, graph)
            graph.pop(index)
            
            stack.append(edge[1] if v == edge[0] else edge[0])
            count+=1
    return way
    
def find_way_oriented(graph):
    stack = [];
    way = []
 
    stack.append(graph[0][0])
    count = 0
    
    while len(stack) > 0:
        print("Длина стека", len(stack))
        v = stack[len(stack) - 1]
        
        print(v)
        degree = get_d(v, graph)
 
        if degree == 0:
            print("Добавляем в список")
            stack.pop()
            way.append(v)
        else:
            print("Добавляем в стек")
            index, edge = get_edge_and_index_oriented(v, graph)
            graph.pop(index)
            stack.append(edge[1])
            count+=1
        
    return way
 

def get_d(v, graph):  #Получить степень вершины 
    degree = 0
    for (x, y) in graph:
        if v == x or v == y:
            degree += 1
 
    return degree
 
 
def get_edge_and_index(v, graph): #Получить узел и его индекс
    edge = ();
    index = -1
 
    for i in range(len(graph)):
        if (v == graph[i][0] or v == graph[i][1]):
            edge, index = graph[i], i
            break
    return index, edge
 
def get_edge_and_index_oriented(v, graph):
    edge = ();
    index = -1
    for i in range(len(graph)):
        if (v == graph[i][0]):
            edge, index = graph[i], i
            print("Найдено")
            break
    return index, edge
 
 
graph_oriented = [(2, 1), (1, 3), (2 , 5), (3, 7), (3, 2), (4, 2),
(5, 4), (5, 8), (6, 3), (6, 5), (7,6), (8,6)]

path_o = find_way_oriented(graph_oriented)
reversed_path = path_o[::-1]
print(reversed_path)

graph = [(1, 2), (1, 3), (1, 4), (1, 6), (2, 4), (2, 3), (2, 5),
(3, 4), (3, 5), (4, 5), (5, 6)]
path = find_way(graph)
print(path)

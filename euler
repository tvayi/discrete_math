def find_eulerian_path(graph):
    stack = [];
    path = []
 
    stack.append(graph[0][0])
    count = 0
    
    while len(stack) > 0:
        print("Итерация " ,count)
        print("Длина стека", len(stack))
        v = stack[len(stack) - 1]
        
        print(v)
        degree = get_degree(v, graph)
 
        if degree == 0:
            print("Добавляем в список")
            stack.pop()
            path.append(v)
        else:
            print("Добавляем в стек")
            index, edge = get_edge_and_index(v, graph)
            graph.pop(index)
            
            stack.append(edge[1] if v == edge[0] else edge[0])
            count+=1
    return path
    
def find_eulerian_path_oriented(graph):
    stack = [];
    path = []
 
    stack.append(graph[0][0])
    count = 0
    
    while len(stack) > 0:
        print("Итерация " ,count)
        print("Длина стека", len(stack))
        v = stack[len(stack) - 1]
        
        print(v)
        degree = get_degree(v, graph)
 
        if degree == 0:
            print("Добавляем в список")
            stack.pop()
            path.append(v)
        else:
            print("Добавляем в стек")
            index, edge = get_edge_and_index_oriented(v, graph)
            graph.pop(index)
            stack.append(edge[1])
            count+=1
    return path
 
 
def get_degree(v, graph):
    degree = 0
    for (x, y) in graph:
        if v == x or v == y:
            degree += 1
 
    return degree
 
 
def get_edge_and_index(v, graph):
    edge = ();
    index = -1
 
    for i in range(len(graph)):
        if (v == graph[i][0] or v == graph[i][1]):
            edge, index = graph[i], i
            break
    return index, edge
 
def get_edge_and_index_oriented(v, graph):
    edge = ();
    index = -1
    for i in range(len(graph)):
        if (v == graph[i][0]):
            edge, index = graph[i], i
            print("Найдено")
            break
    return index, edge
 
 
graph = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), 
(3, 6), (2, 6), (4, 6), (3, 5), (2, 4), (1, 5)]

graph_oriented = [(1, 2), (2, 3), (3, 1)]
 
print(find_eulerian_path_oriented(graph_oriented))
